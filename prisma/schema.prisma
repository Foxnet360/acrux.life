// Acrux - Strategic Objectives Dashboard
// Prisma schema for PostgreSQL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum UserRole {
  ADMIN
  RESEARCHER
  ANALYST
  VIEWER
  MEMBER
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  ACTIVE
  COMPLETED
  PAUSED
  IN_PROGRESS
}

enum BlockerSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BlockerStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum ProjectRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum PulseRequestStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  passwordHash  String
  firstName     String?
  lastName      String?
  role          UserRole  @default(RESEARCHER)
  organizationId String?
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  ownedProjects   Project[]
  projectMemberships ProjectMember[]
  comments        Comment[]
  activities      Activity[]
  datasets        Dataset[]
  createdObjectives  Objective[] @relation("ObjectiveCreator")
  ownedObjectives    Objective[] @relation("ObjectiveOwner")
  assignedObjectives ObjectiveAssignment[] @relation("AssignmentUser")
  assignedBy         ObjectiveAssignment[] @relation("AssignmentAssigner")
  pulseResponses     PulseResponse[]
  pulseChecks        PulseCheck[]
  blockers          Blocker[]
  blockersReported  Blocker[] @relation("BlockerReporter")
  sentPulseRequests  PulseRequest[] @relation("PulseRequestAdmin")
  receivedPulseRequests PulseRequest[] @relation("PulseRequestMember")
  sentInvitations   TeamInvitation[] @relation("TeamInvitationAdmin")
  receivedInvitations TeamInvitation[] @relation("TeamInvitationAcceptedUser")
  teamMemberships   TeamMember[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Objective {
  id              String   @id @default(cuid())
  title           String
  description     String?
  progress        Float    @default(0)
  healthScore     Float    @default(75)
  status          Status   @default(ACTIVE)
  priority        Priority @default(MEDIUM)
  targetDate      DateTime?
  ownerId         String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation("ObjectiveCreator", fields: [userId], references: [id])
  owner           User?    @relation("ObjectiveOwner", fields: [ownerId], references: [id])
  metrics         Metric[]
  pulseChecks     PulseCheck[]
  blockers        Blocker[]
  assignments     ObjectiveAssignment[]
  pulseRequests   PulseRequest[]
  pulseResponses  PulseResponse[]

  @@map("objectives")
}

model ObjectiveAssignment {
  id          String    @id @default(cuid())
  role        String    @default("member")
  assignedAt  DateTime  @default(now())
  isActive    Boolean   @default(true)
  userId      String
  objectiveId String
  assignedBy  String

  objective   Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  user        User      @relation("AssignmentUser", fields: [userId], references: [id])
  assigner    User      @relation("AssignmentAssigner", fields: [assignedBy], references: [id])

  @@unique([userId, objectiveId])
  @@map("objective_assignments")
}

model PulseRequest {
  id          String    @id @default(cuid())
  title       String
  message     String?
  question    String?
  dueDate     DateTime?
  expiresAt   DateTime?
  status      PulseRequestStatus @default(PENDING)
  adminId     String
  memberId    String
  objectiveId String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  admin       User @relation("PulseRequestAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  member      User @relation("PulseRequestMember", fields: [memberId], references: [id], onDelete: Cascade)
  objective   Objective? @relation(fields: [objectiveId], references: [id], onDelete: SetNull)
  responses   PulseResponse[]

  @@map("pulse_requests")
}

model PulseResponse {
  id            String      @id @default(cuid())
  pulseRequestId String
  sentiment     Int         // 1-5 scale (1=ðŸ˜ž, 5=ðŸ˜Š)
  confidence    Int         // 1-5 scale
  rating        Int?
  feedback      String?
  isAnonymous   Boolean     @default(true)
  userId        String
  objectiveId   String
  createdAt     DateTime    @default(now())

  pulseRequest  PulseRequest @relation(fields: [pulseRequestId], references: [id], onDelete: Cascade)
  user          User @relation(fields: [userId], references: [id])
  objective     Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("pulse_responses")
}

model Blocker {
  id          String          @id @default(cuid())
  title       String
  description String
  severity    BlockerSeverity @default(MEDIUM)
  status      BlockerStatus   @default(OPEN)
  isAnonymous Boolean         @default(true)
  userId      String
  reporterId  String?
  assignedTo  String?
  resolvedAt  DateTime?
  objectiveId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  reporter    User?     @relation("BlockerReporter", fields: [reporterId], references: [id])
  objective   Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("blockers")
}

model Metric {
  id          String    @id @default(cuid())
  name        String
  description String?
  currentValue Float     @default(0)
  targetValue Float
  unit        String     @default("units")
  objectiveId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  objective   Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("metrics")
}

model PulseCheck {
  id          String    @id @default(cuid())
  sentiment   Int       // 1-5 scale (1=ðŸ˜ž, 5=ðŸ˜Š)
  confidence  Int       // 1-5 scale
  feedback    String?
  isAnonymous Boolean   @default(true)
  userId      String
  objectiveId String
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  objective   Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("pulse_checks")
}

model TeamMember {
  id        String       @id @default(cuid())
  role      String       @default("member")
  joinedAt  DateTime     @default(now())
  isActive  Boolean      @default(true)
  userId    String
  adminId   String

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, adminId])
  @@map("team_members")
}

model TeamInvitation {
  id          String    @id @default(cuid())
  email       String
  role        String    @default("team_member")
  status      InvitationStatus @default(PENDING)
  token       String    @unique
  expiresAt   DateTime
  adminId     String
  acceptedBy  String?
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?

  admin         User @relation("TeamInvitationAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  acceptedUser  User? @relation("TeamInvitationAcceptedUser", fields: [acceptedBy], references: [id])

  @@map("team_invitations")
}

model Activity {
  id        String   @id @default(cuid())
  action    String   // e.g., "created_project", "uploaded_dataset", "added_comment"
  metadata  Json?    // Additional context about the action
  userId    String
  projectId String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
  @@map("activities")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  datasets    Dataset[]
  activities  Activity[]

  @@index([ownerId])
  @@map("projects")
}

model ProjectMember {
  id        String       @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole  @default(VIEWER)
  joinedAt  DateTime     @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model Dataset {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  fileKey     String   // S3 key or cloud storage path
  fileSize    Int
  fileType    String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader    User         @relation(fields: [uploadedBy], references: [id])
  tags        DatasetTag[]
  comments    Comment[]

  @@index([projectId])
  @@index([uploadedBy])
  @@map("datasets")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())

  datasets  DatasetTag[]

  @@map("tags")
}

model DatasetTag {
  id        String @id @default(cuid())
  datasetId String
  tagId     String

  dataset   Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([datasetId, tagId])
  @@index([datasetId])
  @@index([tagId])
  @@map("dataset_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  datasetId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataset   Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([datasetId])
  @@index([userId])
  @@map("comments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
